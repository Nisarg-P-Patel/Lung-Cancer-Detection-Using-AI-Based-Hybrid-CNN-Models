# -*- coding: utf-8 -*-
"""performance comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TXEXA5RvVPzYfSTfgrJW4M22M1UjSUdZ
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.applications import MobileNet, DenseNet169, ResNet50, EfficientNetB2, EfficientNetB4, Xception, InceptionV3, VGG19, DenseNet201, ResNet152
from keras.layers import GlobalAveragePooling2D
import pandas as pd
import numpy as np
import os
from shutil import copy
from zipfile import ZipFile
import matplotlib.pyplot as plt
import cv2
from keras.models import Sequential,Model
from keras.layers import Dense,Dropout,Activation,Flatten,GlobalAveragePooling2D
from keras.layers import Conv2D,MaxPooling2D,ZeroPadding2D
from keras.layers import BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau
from matplotlib import pyplot as plt
from matplotlib import image
from sklearn.model_selection import KFold

def create_model():
  # base_model = MobileNet(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = DenseNet169(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = EfficientNetB2(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = EfficientNetB4(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = ResNet50(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = Xception(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = InceptionV3(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = VGG19(weights='imagenet', input_shape=(224,224,3), include_top=False)
  # base_model = DenseNet201(weights='imagenet', input_shape=(224,224,3), include_top=False)
  base_model = ResNet152(weights='imagenet', input_shape=(224,224,3), include_top=False)

  for layer in base_model.layers:
    layer.trainable = False

  last_layer = base_model.output
  last_layer = BatchNormalization()(last_layer)
  last_layer = GlobalAveragePooling2D()(last_layer)
  last_layer = Dense(256,activation='relu')(last_layer)
  last_layer = Dense(64,activation='relu')(last_layer)
  last_layer = Dense(16,activation='relu')(last_layer)
  last_layer = Dropout(0.4)(last_layer)
  last_layer = Dense(4,activation='sigmoid')(last_layer)
  model = Model(base_model.input, last_layer)

  model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy','Precision','Recall'])

  model.summary()

  return model

# Create a new model instance
model = create_model()

# Load the previously saved weights
model.load_weights('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/ResNet152/saved-model-14-acc_0.8889-pre_0.6330-rec_0.9583.hdf5')

data_path = "/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/"

train_set = data_path + 'train/'
val_set = data_path + 'valid/'
test_set = data_path + 'test/'
epochs = 30

train_datagen = ImageDataGenerator(
    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1,
    rescale=1. / 255
)
val_datagen= ImageDataGenerator(
    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1,
    rescale=1. / 255)
test_datagen= ImageDataGenerator(
    rescale=1. / 255
)

train_generator = train_datagen.flow_from_directory(
    train_set,
    target_size = (224,224),
    batch_size = 8,
    class_mode = 'categorical')
test_generator = test_datagen.flow_from_directory(
    test_set,
    target_size = (224,224),
    batch_size = 8,
    shuffle=True,
    class_mode = 'categorical')
validation_generator = test_datagen.flow_from_directory(
    val_set,
    target_size = (224,224),
    batch_size = 8,
    shuffle=True,
    class_mode = 'categorical')

a = model.evaluate(test_generator)

obj = pd.read_pickle(r'/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/ResNet152/metrics.pickle')
obj

import pickle

# some_obj = {'loss':a[0], 'accuracy':a[1], 'precision':a[2], 'recall':a[3], 'cm':cm}
some_obj = {'loss':a[0], 'accuracy':a[1], 'precision':a[2], 'recall':a[3]}
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'MobileNet/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet169/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB2/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB4/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet50/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'Xception/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'InceptionV3/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'VGG19/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet201/' +'metrics.pickle', 'wb') as f:
with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet152/' +'metrics.pickle', 'wb') as f:
    pickle.dump(some_obj, f)

models = ['DenseNet169', 'DenseNet201', 'EfficientNetB4', 'InceptionV3', 'MobileNet', 'ResNet50', 'VGG19', 'Xception']

data = []
for i in models:
  obj = pd.read_pickle(r'/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/'+str(i)+'/metrics.pickle')
  data.append([obj['loss'],obj['accuracy'],obj['precision'],obj['recall']])

data

d = pd.DataFrame(data, columns=['loss','accuracy','precision','recall'], index = models)
# d = d.T

d

