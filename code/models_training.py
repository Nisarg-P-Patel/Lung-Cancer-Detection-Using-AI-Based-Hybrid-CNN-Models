# -*- coding: utf-8 -*-
"""models training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A62qIfiIXGNwC_Yzv6bxeKwPU_kFphXy
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import os
from shutil import copy
from zipfile import ZipFile
import matplotlib.pyplot as plt
import cv2
from keras.models import Sequential,Model
from keras.layers import Dense,Dropout,Activation,Flatten,GlobalAveragePooling2D
from keras.layers import Conv2D,MaxPooling2D,ZeroPadding2D
from keras.layers import BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau
from matplotlib import pyplot as plt
from matplotlib import image
from sklearn.model_selection import KFold

data_path = "/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/"

train_set = data_path + 'train/'
val_set = data_path + 'valid/'
test_set = data_path + 'test/'
epochs = 30

train_datagen = ImageDataGenerator(
    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1,
    rescale=1. / 255
)
val_datagen= ImageDataGenerator(
    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1,
    rescale=1. / 255)
test_datagen= ImageDataGenerator(
    rescale=1. / 255
)

train_generator = train_datagen.flow_from_directory(
    train_set,
    target_size = (224,224),
    batch_size = 8,
    class_mode = 'categorical')
test_generator = test_datagen.flow_from_directory(
    test_set,
    target_size = (224,224),
    batch_size = 8,
    shuffle=True,
    class_mode = 'categorical')
validation_generator = test_datagen.flow_from_directory(
    val_set,
    target_size = (224,224),
    batch_size = 8,
    shuffle=True,
    class_mode = 'categorical')

from keras.applications import MobileNet, DenseNet169, ResNet50, EfficientNetB2, EfficientNetB4, Xception, InceptionV3, VGG19, DenseNet201, ResNet152
from keras.layers import GlobalAveragePooling2D

# base_model = MobileNet(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = DenseNet169(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = EfficientNetB2(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = EfficientNetB4(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = ResNet50(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = Xception(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = InceptionV3(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = VGG19(weights='imagenet', input_shape=(224,224,3), include_top=False)
# base_model = DenseNet201(weights='imagenet', input_shape=(224,224,3), include_top=False)
base_model = ResNet152(weights='imagenet', input_shape=(224,224,3), include_top=False)

for layer in base_model.layers:
    layer.trainable = False

last_layer = base_model.output
last_layer = BatchNormalization()(last_layer)
last_layer = GlobalAveragePooling2D()(last_layer)
last_layer = Dense(256,activation='relu')(last_layer)
last_layer = Dense(64,activation='relu')(last_layer)
last_layer = Dense(16,activation='relu')(last_layer)
last_layer = Dropout(0.4)(last_layer)
last_layer = Dense(4,activation='sigmoid')(last_layer)
model = Model(base_model.input, last_layer)

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy','Precision','Recall'])


model.summary()

# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'MobileNet/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet169/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB2/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB4/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet50/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'Xception/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'InceptionV3/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'VGG19/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
# filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet201/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'
filepath =  '/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet152/' + 'saved-model-{epoch:02d}-acc_{val_accuracy:.4f}-pre_{val_precision:.4f}-rec_{val_recall:.4f}.hdf5'

checkpoint = ModelCheckpoint(filepath,
                             monitor='val_accuracy',
                             save_best_only=True,
                             mode='max')

earlystop = EarlyStopping(
                          monitor='val_loss',
                          min_delta=0,
                          patience=10,
                          restore_best_weights=True)

learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',
                                            patience=5,
                                            verbose=1,
                                            factor=0.2,
                                            min_lr=0.0001)

my_callbacks = [checkpoint,earlystop,learning_rate_reduction]

history = model.fit_generator(
    train_generator,
    epochs = epochs,
    validation_data = validation_generator,
    callbacks = my_callbacks
)



t = model.predict(test_generator)



# true_labels = test_generator.classes
# predictions = model.predict_generator(test_generator)

# y_true = true_labels
# y_pred = np.array([np.argmax(x) for x in predictions])

# from sklearn.metrics import confusion_matrix
# cm = confusion_matrix(y_true, y_pred)

# print(cm)

# import seaborn as sn
# import pandas as pd
# import matplotlib.pyplot as plt

# df_cm = pd.DataFrame(cm, index = [i for i in "ABCD"],
#                   columns = [i for i in "ABCD"])
# plt.figure(figsize = (10,7))
# sn.heatmap(df_cm, annot=True)

a = model.evaluate(test_generator)



# filepath =  '/content/' + 'MobileNet/'

import pickle

# some_obj = {'loss':a[0], 'accuracy':a[1], 'precision':a[2], 'recall':a[3], 'cm':cm}
some_obj = {'loss':a[0], 'accuracy':a[1], 'precision':a[2], 'recall':a[3]}
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'MobileNet/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet169/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB2/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'EfficientNetB4/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet50/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'Xception/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'InceptionV3/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'VGG19/' +'metrics.pickle', 'wb') as f:
# with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'DenseNet201/' +'metrics.pickle', 'wb') as f:
with open('/content/drive/MyDrive/CSE572-DM/Final_Project/new_data/models/' + 'ResNet152/' +'metrics.pickle', 'wb') as f:
    pickle.dump(some_obj, f)

some_obj

